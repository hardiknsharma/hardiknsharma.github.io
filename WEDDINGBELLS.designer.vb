'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="WEDDING_BELLS")>  _
Partial Public Class WEDDINGBELLSDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertADM_AGENCY_REGISTRATION(instance As ADM_AGENCY_REGISTRATION)
    End Sub
  Partial Private Sub UpdateADM_AGENCY_REGISTRATION(instance As ADM_AGENCY_REGISTRATION)
    End Sub
  Partial Private Sub DeleteADM_AGENCY_REGISTRATION(instance As ADM_AGENCY_REGISTRATION)
    End Sub
  Partial Private Sub InsertADM_AGENCY_TYPE(instance As ADM_AGENCY_TYPE)
    End Sub
  Partial Private Sub UpdateADM_AGENCY_TYPE(instance As ADM_AGENCY_TYPE)
    End Sub
  Partial Private Sub DeleteADM_AGENCY_TYPE(instance As ADM_AGENCY_TYPE)
    End Sub
  Partial Private Sub InsertADM_CITY(instance As ADM_CITY)
    End Sub
  Partial Private Sub UpdateADM_CITY(instance As ADM_CITY)
    End Sub
  Partial Private Sub DeleteADM_CITY(instance As ADM_CITY)
    End Sub
  Partial Private Sub InsertADM_CONTACT_US(instance As ADM_CONTACT_US)
    End Sub
  Partial Private Sub UpdateADM_CONTACT_US(instance As ADM_CONTACT_US)
    End Sub
  Partial Private Sub DeleteADM_CONTACT_US(instance As ADM_CONTACT_US)
    End Sub
  Partial Private Sub InsertADM_CUSTOMER_REGISTRATION(instance As ADM_CUSTOMER_REGISTRATION)
    End Sub
  Partial Private Sub UpdateADM_CUSTOMER_REGISTRATION(instance As ADM_CUSTOMER_REGISTRATION)
    End Sub
  Partial Private Sub DeleteADM_CUSTOMER_REGISTRATION(instance As ADM_CUSTOMER_REGISTRATION)
    End Sub
  Partial Private Sub InsertADM_CUSTOMIZE_PACKAGE(instance As ADM_CUSTOMIZE_PACKAGE)
    End Sub
  Partial Private Sub UpdateADM_CUSTOMIZE_PACKAGE(instance As ADM_CUSTOMIZE_PACKAGE)
    End Sub
  Partial Private Sub DeleteADM_CUSTOMIZE_PACKAGE(instance As ADM_CUSTOMIZE_PACKAGE)
    End Sub
  Partial Private Sub InsertADM_EMPLOYEE(instance As ADM_EMPLOYEE)
    End Sub
  Partial Private Sub UpdateADM_EMPLOYEE(instance As ADM_EMPLOYEE)
    End Sub
  Partial Private Sub DeleteADM_EMPLOYEE(instance As ADM_EMPLOYEE)
    End Sub
  Partial Private Sub InsertADM_EMPLOYEE_TYPE(instance As ADM_EMPLOYEE_TYPE)
    End Sub
  Partial Private Sub UpdateADM_EMPLOYEE_TYPE(instance As ADM_EMPLOYEE_TYPE)
    End Sub
  Partial Private Sub DeleteADM_EMPLOYEE_TYPE(instance As ADM_EMPLOYEE_TYPE)
    End Sub
  Partial Private Sub InsertADM_INQUIRY(instance As ADM_INQUIRY)
    End Sub
  Partial Private Sub UpdateADM_INQUIRY(instance As ADM_INQUIRY)
    End Sub
  Partial Private Sub DeleteADM_INQUIRY(instance As ADM_INQUIRY)
    End Sub
  Partial Private Sub InsertADM_PACKAGE_MASTER(instance As ADM_PACKAGE_MASTER)
    End Sub
  Partial Private Sub UpdateADM_PACKAGE_MASTER(instance As ADM_PACKAGE_MASTER)
    End Sub
  Partial Private Sub DeleteADM_PACKAGE_MASTER(instance As ADM_PACKAGE_MASTER)
    End Sub
  Partial Private Sub InsertADM_PACKAGE_TYPE(instance As ADM_PACKAGE_TYPE)
    End Sub
  Partial Private Sub UpdateADM_PACKAGE_TYPE(instance As ADM_PACKAGE_TYPE)
    End Sub
  Partial Private Sub DeleteADM_PACKAGE_TYPE(instance As ADM_PACKAGE_TYPE)
    End Sub
  Partial Private Sub InsertADM_REGISTRATION(instance As ADM_REGISTRATION)
    End Sub
  Partial Private Sub UpdateADM_REGISTRATION(instance As ADM_REGISTRATION)
    End Sub
  Partial Private Sub DeleteADM_REGISTRATION(instance As ADM_REGISTRATION)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("WEDDING_BELLSConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ADM_AGENCY_REGISTRATIONs() As System.Data.Linq.Table(Of ADM_AGENCY_REGISTRATION)
		Get
			Return Me.GetTable(Of ADM_AGENCY_REGISTRATION)
		End Get
	End Property
	
	Public ReadOnly Property ADM_AGENCY_TYPEs() As System.Data.Linq.Table(Of ADM_AGENCY_TYPE)
		Get
			Return Me.GetTable(Of ADM_AGENCY_TYPE)
		End Get
	End Property
	
	Public ReadOnly Property ADM_CITies() As System.Data.Linq.Table(Of ADM_CITY)
		Get
			Return Me.GetTable(Of ADM_CITY)
		End Get
	End Property
	
	Public ReadOnly Property ADM_CONTACT_US() As System.Data.Linq.Table(Of ADM_CONTACT_US)
		Get
			Return Me.GetTable(Of ADM_CONTACT_US)
		End Get
	End Property
	
	Public ReadOnly Property ADM_CUSTOMER_REGISTRATIONs() As System.Data.Linq.Table(Of ADM_CUSTOMER_REGISTRATION)
		Get
			Return Me.GetTable(Of ADM_CUSTOMER_REGISTRATION)
		End Get
	End Property
	
	Public ReadOnly Property ADM_CUSTOMIZE_PACKAGEs() As System.Data.Linq.Table(Of ADM_CUSTOMIZE_PACKAGE)
		Get
			Return Me.GetTable(Of ADM_CUSTOMIZE_PACKAGE)
		End Get
	End Property
	
	Public ReadOnly Property ADM_EMPLOYEEs() As System.Data.Linq.Table(Of ADM_EMPLOYEE)
		Get
			Return Me.GetTable(Of ADM_EMPLOYEE)
		End Get
	End Property
	
	Public ReadOnly Property ADM_EMPLOYEE_TYPEs() As System.Data.Linq.Table(Of ADM_EMPLOYEE_TYPE)
		Get
			Return Me.GetTable(Of ADM_EMPLOYEE_TYPE)
		End Get
	End Property
	
	Public ReadOnly Property ADM_INQUIRies() As System.Data.Linq.Table(Of ADM_INQUIRY)
		Get
			Return Me.GetTable(Of ADM_INQUIRY)
		End Get
	End Property
	
	Public ReadOnly Property ADM_PACKAGE_MASTERs() As System.Data.Linq.Table(Of ADM_PACKAGE_MASTER)
		Get
			Return Me.GetTable(Of ADM_PACKAGE_MASTER)
		End Get
	End Property
	
	Public ReadOnly Property ADM_PACKAGE_TYPEs() As System.Data.Linq.Table(Of ADM_PACKAGE_TYPE)
		Get
			Return Me.GetTable(Of ADM_PACKAGE_TYPE)
		End Get
	End Property
	
	Public ReadOnly Property ADM_REGISTRATIONs() As System.Data.Linq.Table(Of ADM_REGISTRATION)
		Get
			Return Me.GetTable(Of ADM_REGISTRATION)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_AGENCY_REGISTRATION")>  _
Partial Public Class ADM_AGENCY_REGISTRATION
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_AGENCY_REGISTRATION_ID As Integer
	
	Private _ADM_AGENCY_TYPE_ID As System.Nullable(Of Integer)
	
	Private _AGENCY_NAME As String
	
	Private _CONTACT_PERSON_NAME As String
	
	Private _MOBILE_NO As String
	
	Private _EMAIL_ID As String
	
	Private _ADDRESS As String
	
	Private _ADM_CITY_ID As System.Nullable(Of Integer)
	
	Private _EXPERIENCE As String
	
	Private _NO_OF_YEARS As String
	
	Private _PAYMENT_TERMS As String
	
	Private _SPECIALIZATION As String
	
	Private _REMARKS As String
	
	Private _ADM_REGISTRATION_ID As System.Nullable(Of Integer)
	
	Private _ADM_AGENCY_TYPE As EntityRef(Of ADM_AGENCY_TYPE)
	
	Private _ADM_CITY As EntityRef(Of ADM_CITY)
	
	Private _ADM_REGISTRATION As EntityRef(Of ADM_REGISTRATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_AGENCY_REGISTRATION_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_AGENCY_REGISTRATION_IDChanged()
    End Sub
    Partial Private Sub OnADM_AGENCY_TYPE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_AGENCY_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnAGENCY_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnAGENCY_NAMEChanged()
    End Sub
    Partial Private Sub OnCONTACT_PERSON_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnCONTACT_PERSON_NAMEChanged()
    End Sub
    Partial Private Sub OnMOBILE_NOChanging(value As String)
    End Sub
    Partial Private Sub OnMOBILE_NOChanged()
    End Sub
    Partial Private Sub OnEMAIL_IDChanging(value As String)
    End Sub
    Partial Private Sub OnEMAIL_IDChanged()
    End Sub
    Partial Private Sub OnADDRESSChanging(value As String)
    End Sub
    Partial Private Sub OnADDRESSChanged()
    End Sub
    Partial Private Sub OnADM_CITY_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_CITY_IDChanged()
    End Sub
    Partial Private Sub OnEXPERIENCEChanging(value As String)
    End Sub
    Partial Private Sub OnEXPERIENCEChanged()
    End Sub
    Partial Private Sub OnNO_OF_YEARSChanging(value As String)
    End Sub
    Partial Private Sub OnNO_OF_YEARSChanged()
    End Sub
    Partial Private Sub OnPAYMENT_TERMSChanging(value As String)
    End Sub
    Partial Private Sub OnPAYMENT_TERMSChanged()
    End Sub
    Partial Private Sub OnSPECIALIZATIONChanging(value As String)
    End Sub
    Partial Private Sub OnSPECIALIZATIONChanged()
    End Sub
    Partial Private Sub OnREMARKSChanging(value As String)
    End Sub
    Partial Private Sub OnREMARKSChanged()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_AGENCY_TYPE = CType(Nothing, EntityRef(Of ADM_AGENCY_TYPE))
		Me._ADM_CITY = CType(Nothing, EntityRef(Of ADM_CITY))
		Me._ADM_REGISTRATION = CType(Nothing, EntityRef(Of ADM_REGISTRATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_AGENCY_REGISTRATION_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_AGENCY_REGISTRATION_ID() As Integer
		Get
			Return Me._ADM_AGENCY_REGISTRATION_ID
		End Get
		Set
			If ((Me._ADM_AGENCY_REGISTRATION_ID = value)  _
						= false) Then
				Me.OnADM_AGENCY_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_AGENCY_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_AGENCY_REGISTRATION_ID")
				Me.OnADM_AGENCY_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_AGENCY_TYPE_ID", DbType:="Int")>  _
	Public Property ADM_AGENCY_TYPE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_AGENCY_TYPE_ID
		End Get
		Set
			If (Me._ADM_AGENCY_TYPE_ID.Equals(value) = false) Then
				If Me._ADM_AGENCY_TYPE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_AGENCY_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_AGENCY_TYPE_ID = value
				Me.SendPropertyChanged("ADM_AGENCY_TYPE_ID")
				Me.OnADM_AGENCY_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AGENCY_NAME", DbType:="VarChar(250)")>  _
	Public Property AGENCY_NAME() As String
		Get
			Return Me._AGENCY_NAME
		End Get
		Set
			If (String.Equals(Me._AGENCY_NAME, value) = false) Then
				Me.OnAGENCY_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._AGENCY_NAME = value
				Me.SendPropertyChanged("AGENCY_NAME")
				Me.OnAGENCY_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTACT_PERSON_NAME", DbType:="VarChar(250)")>  _
	Public Property CONTACT_PERSON_NAME() As String
		Get
			Return Me._CONTACT_PERSON_NAME
		End Get
		Set
			If (String.Equals(Me._CONTACT_PERSON_NAME, value) = false) Then
				Me.OnCONTACT_PERSON_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._CONTACT_PERSON_NAME = value
				Me.SendPropertyChanged("CONTACT_PERSON_NAME")
				Me.OnCONTACT_PERSON_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOBILE_NO", DbType:="VarChar(15)")>  _
	Public Property MOBILE_NO() As String
		Get
			Return Me._MOBILE_NO
		End Get
		Set
			If (String.Equals(Me._MOBILE_NO, value) = false) Then
				Me.OnMOBILE_NOChanging(value)
				Me.SendPropertyChanging
				Me._MOBILE_NO = value
				Me.SendPropertyChanged("MOBILE_NO")
				Me.OnMOBILE_NOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL_ID", DbType:="VarChar(50)")>  _
	Public Property EMAIL_ID() As String
		Get
			Return Me._EMAIL_ID
		End Get
		Set
			If (String.Equals(Me._EMAIL_ID, value) = false) Then
				Me.OnEMAIL_IDChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL_ID = value
				Me.SendPropertyChanged("EMAIL_ID")
				Me.OnEMAIL_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADDRESS", DbType:="VarChar(50)")>  _
	Public Property ADDRESS() As String
		Get
			Return Me._ADDRESS
		End Get
		Set
			If (String.Equals(Me._ADDRESS, value) = false) Then
				Me.OnADDRESSChanging(value)
				Me.SendPropertyChanging
				Me._ADDRESS = value
				Me.SendPropertyChanged("ADDRESS")
				Me.OnADDRESSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_CITY_ID", DbType:="Int")>  _
	Public Property ADM_CITY_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_CITY_ID
		End Get
		Set
			If (Me._ADM_CITY_ID.Equals(value) = false) Then
				If Me._ADM_CITY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_CITY_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_CITY_ID = value
				Me.SendPropertyChanged("ADM_CITY_ID")
				Me.OnADM_CITY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXPERIENCE", DbType:="VarChar(50)")>  _
	Public Property EXPERIENCE() As String
		Get
			Return Me._EXPERIENCE
		End Get
		Set
			If (String.Equals(Me._EXPERIENCE, value) = false) Then
				Me.OnEXPERIENCEChanging(value)
				Me.SendPropertyChanging
				Me._EXPERIENCE = value
				Me.SendPropertyChanged("EXPERIENCE")
				Me.OnEXPERIENCEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NO_OF_YEARS", DbType:="VarChar(50)")>  _
	Public Property NO_OF_YEARS() As String
		Get
			Return Me._NO_OF_YEARS
		End Get
		Set
			If (String.Equals(Me._NO_OF_YEARS, value) = false) Then
				Me.OnNO_OF_YEARSChanging(value)
				Me.SendPropertyChanging
				Me._NO_OF_YEARS = value
				Me.SendPropertyChanged("NO_OF_YEARS")
				Me.OnNO_OF_YEARSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAYMENT_TERMS", DbType:="VarChar(50)")>  _
	Public Property PAYMENT_TERMS() As String
		Get
			Return Me._PAYMENT_TERMS
		End Get
		Set
			If (String.Equals(Me._PAYMENT_TERMS, value) = false) Then
				Me.OnPAYMENT_TERMSChanging(value)
				Me.SendPropertyChanging
				Me._PAYMENT_TERMS = value
				Me.SendPropertyChanged("PAYMENT_TERMS")
				Me.OnPAYMENT_TERMSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPECIALIZATION", DbType:="VarChar(50)")>  _
	Public Property SPECIALIZATION() As String
		Get
			Return Me._SPECIALIZATION
		End Get
		Set
			If (String.Equals(Me._SPECIALIZATION, value) = false) Then
				Me.OnSPECIALIZATIONChanging(value)
				Me.SendPropertyChanging
				Me._SPECIALIZATION = value
				Me.SendPropertyChanged("SPECIALIZATION")
				Me.OnSPECIALIZATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REMARKS", DbType:="VarChar(MAX)")>  _
	Public Property REMARKS() As String
		Get
			Return Me._REMARKS
		End Get
		Set
			If (String.Equals(Me._REMARKS, value) = false) Then
				Me.OnREMARKSChanging(value)
				Me.SendPropertyChanging
				Me._REMARKS = value
				Me.SendPropertyChanged("REMARKS")
				Me.OnREMARKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", DbType:="Int")>  _
	Public Property ADM_REGISTRATION_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If (Me._ADM_REGISTRATION_ID.Equals(value) = false) Then
				If Me._ADM_REGISTRATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_AGENCY_TYPE_ADM_AGENCY_REGISTRATION", Storage:="_ADM_AGENCY_TYPE", ThisKey:="ADM_AGENCY_TYPE_ID", OtherKey:="ADM_AGENCY_TYPE_ID", IsForeignKey:=true)>  _
	Public Property ADM_AGENCY_TYPE() As ADM_AGENCY_TYPE
		Get
			Return Me._ADM_AGENCY_TYPE.Entity
		End Get
		Set
			Dim previousValue As ADM_AGENCY_TYPE = Me._ADM_AGENCY_TYPE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_AGENCY_TYPE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_AGENCY_TYPE.Entity = Nothing
					previousValue.ADM_AGENCY_REGISTRATIONs.Remove(Me)
				End If
				Me._ADM_AGENCY_TYPE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_AGENCY_REGISTRATIONs.Add(Me)
					Me._ADM_AGENCY_TYPE_ID = value.ADM_AGENCY_TYPE_ID
				Else
					Me._ADM_AGENCY_TYPE_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_AGENCY_TYPE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_CITY_ADM_AGENCY_REGISTRATION", Storage:="_ADM_CITY", ThisKey:="ADM_CITY_ID", OtherKey:="ADM_CITY_ID", IsForeignKey:=true)>  _
	Public Property ADM_CITY() As ADM_CITY
		Get
			Return Me._ADM_CITY.Entity
		End Get
		Set
			Dim previousValue As ADM_CITY = Me._ADM_CITY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_CITY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_CITY.Entity = Nothing
					previousValue.ADM_AGENCY_REGISTRATIONs.Remove(Me)
				End If
				Me._ADM_CITY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_AGENCY_REGISTRATIONs.Add(Me)
					Me._ADM_CITY_ID = value.ADM_CITY_ID
				Else
					Me._ADM_CITY_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_CITY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_AGENCY_REGISTRATION", Storage:="_ADM_REGISTRATION", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID", IsForeignKey:=true)>  _
	Public Property ADM_REGISTRATION() As ADM_REGISTRATION
		Get
			Return Me._ADM_REGISTRATION.Entity
		End Get
		Set
			Dim previousValue As ADM_REGISTRATION = Me._ADM_REGISTRATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_REGISTRATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_REGISTRATION.Entity = Nothing
					previousValue.ADM_AGENCY_REGISTRATIONs.Remove(Me)
				End If
				Me._ADM_REGISTRATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_AGENCY_REGISTRATIONs.Add(Me)
					Me._ADM_REGISTRATION_ID = value.ADM_REGISTRATION_ID
				Else
					Me._ADM_REGISTRATION_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_REGISTRATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_AGENCY_TYPE")>  _
Partial Public Class ADM_AGENCY_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_AGENCY_TYPE_ID As Integer
	
	Private _AGENCY_TPYE As String
	
	Private _REMARKS As String
	
	Private _ADM_REGISTRATION_ID As System.Nullable(Of Integer)
	
	Private _ADM_AGENCY_REGISTRATIONs As EntitySet(Of ADM_AGENCY_REGISTRATION)
	
	Private _ADM_REGISTRATION As EntityRef(Of ADM_REGISTRATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_AGENCY_TYPE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_AGENCY_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnAGENCY_TPYEChanging(value As String)
    End Sub
    Partial Private Sub OnAGENCY_TPYEChanged()
    End Sub
    Partial Private Sub OnREMARKSChanging(value As String)
    End Sub
    Partial Private Sub OnREMARKSChanged()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_AGENCY_REGISTRATIONs = New EntitySet(Of ADM_AGENCY_REGISTRATION)(AddressOf Me.attach_ADM_AGENCY_REGISTRATIONs, AddressOf Me.detach_ADM_AGENCY_REGISTRATIONs)
		Me._ADM_REGISTRATION = CType(Nothing, EntityRef(Of ADM_REGISTRATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_AGENCY_TYPE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_AGENCY_TYPE_ID() As Integer
		Get
			Return Me._ADM_AGENCY_TYPE_ID
		End Get
		Set
			If ((Me._ADM_AGENCY_TYPE_ID = value)  _
						= false) Then
				Me.OnADM_AGENCY_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_AGENCY_TYPE_ID = value
				Me.SendPropertyChanged("ADM_AGENCY_TYPE_ID")
				Me.OnADM_AGENCY_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AGENCY_TPYE", DbType:="VarChar(50)")>  _
	Public Property AGENCY_TPYE() As String
		Get
			Return Me._AGENCY_TPYE
		End Get
		Set
			If (String.Equals(Me._AGENCY_TPYE, value) = false) Then
				Me.OnAGENCY_TPYEChanging(value)
				Me.SendPropertyChanging
				Me._AGENCY_TPYE = value
				Me.SendPropertyChanged("AGENCY_TPYE")
				Me.OnAGENCY_TPYEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REMARKS", DbType:="VarChar(250)")>  _
	Public Property REMARKS() As String
		Get
			Return Me._REMARKS
		End Get
		Set
			If (String.Equals(Me._REMARKS, value) = false) Then
				Me.OnREMARKSChanging(value)
				Me.SendPropertyChanging
				Me._REMARKS = value
				Me.SendPropertyChanged("REMARKS")
				Me.OnREMARKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", DbType:="Int")>  _
	Public Property ADM_REGISTRATION_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If (Me._ADM_REGISTRATION_ID.Equals(value) = false) Then
				If Me._ADM_REGISTRATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_AGENCY_TYPE_ADM_AGENCY_REGISTRATION", Storage:="_ADM_AGENCY_REGISTRATIONs", ThisKey:="ADM_AGENCY_TYPE_ID", OtherKey:="ADM_AGENCY_TYPE_ID")>  _
	Public Property ADM_AGENCY_REGISTRATIONs() As EntitySet(Of ADM_AGENCY_REGISTRATION)
		Get
			Return Me._ADM_AGENCY_REGISTRATIONs
		End Get
		Set
			Me._ADM_AGENCY_REGISTRATIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_AGENCY_TYPE", Storage:="_ADM_REGISTRATION", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID", IsForeignKey:=true)>  _
	Public Property ADM_REGISTRATION() As ADM_REGISTRATION
		Get
			Return Me._ADM_REGISTRATION.Entity
		End Get
		Set
			Dim previousValue As ADM_REGISTRATION = Me._ADM_REGISTRATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_REGISTRATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_REGISTRATION.Entity = Nothing
					previousValue.ADM_AGENCY_TYPEs.Remove(Me)
				End If
				Me._ADM_REGISTRATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_AGENCY_TYPEs.Add(Me)
					Me._ADM_REGISTRATION_ID = value.ADM_REGISTRATION_ID
				Else
					Me._ADM_REGISTRATION_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_REGISTRATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ADM_AGENCY_REGISTRATIONs(ByVal entity As ADM_AGENCY_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_AGENCY_TYPE = Me
	End Sub
	
	Private Sub detach_ADM_AGENCY_REGISTRATIONs(ByVal entity As ADM_AGENCY_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_AGENCY_TYPE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_CITY")>  _
Partial Public Class ADM_CITY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_CITY_ID As Integer
	
	Private _CITY_NAME As String
	
	Private _PINCODE As String
	
	Private _ADM_REGISTRATION_ID As System.Nullable(Of Integer)
	
	Private _ADM_AGENCY_REGISTRATIONs As EntitySet(Of ADM_AGENCY_REGISTRATION)
	
	Private _ADM_CONTACT_US As EntitySet(Of ADM_CONTACT_US)
	
	Private _ADM_CUSTOMER_REGISTRATIONs As EntitySet(Of ADM_CUSTOMER_REGISTRATION)
	
	Private _ADM_EMPLOYEEs As EntitySet(Of ADM_EMPLOYEE)
	
	Private _ADM_REGISTRATIONs As EntitySet(Of ADM_REGISTRATION)
	
	Private _ADM_REGISTRATION As EntityRef(Of ADM_REGISTRATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_CITY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_CITY_IDChanged()
    End Sub
    Partial Private Sub OnCITY_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnCITY_NAMEChanged()
    End Sub
    Partial Private Sub OnPINCODEChanging(value As String)
    End Sub
    Partial Private Sub OnPINCODEChanged()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_AGENCY_REGISTRATIONs = New EntitySet(Of ADM_AGENCY_REGISTRATION)(AddressOf Me.attach_ADM_AGENCY_REGISTRATIONs, AddressOf Me.detach_ADM_AGENCY_REGISTRATIONs)
		Me._ADM_CONTACT_US = New EntitySet(Of ADM_CONTACT_US)(AddressOf Me.attach_ADM_CONTACT_US, AddressOf Me.detach_ADM_CONTACT_US)
		Me._ADM_CUSTOMER_REGISTRATIONs = New EntitySet(Of ADM_CUSTOMER_REGISTRATION)(AddressOf Me.attach_ADM_CUSTOMER_REGISTRATIONs, AddressOf Me.detach_ADM_CUSTOMER_REGISTRATIONs)
		Me._ADM_EMPLOYEEs = New EntitySet(Of ADM_EMPLOYEE)(AddressOf Me.attach_ADM_EMPLOYEEs, AddressOf Me.detach_ADM_EMPLOYEEs)
		Me._ADM_REGISTRATIONs = New EntitySet(Of ADM_REGISTRATION)(AddressOf Me.attach_ADM_REGISTRATIONs, AddressOf Me.detach_ADM_REGISTRATIONs)
		Me._ADM_REGISTRATION = CType(Nothing, EntityRef(Of ADM_REGISTRATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_CITY_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_CITY_ID() As Integer
		Get
			Return Me._ADM_CITY_ID
		End Get
		Set
			If ((Me._ADM_CITY_ID = value)  _
						= false) Then
				Me.OnADM_CITY_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_CITY_ID = value
				Me.SendPropertyChanged("ADM_CITY_ID")
				Me.OnADM_CITY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CITY_NAME", DbType:="VarChar(250)")>  _
	Public Property CITY_NAME() As String
		Get
			Return Me._CITY_NAME
		End Get
		Set
			If (String.Equals(Me._CITY_NAME, value) = false) Then
				Me.OnCITY_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._CITY_NAME = value
				Me.SendPropertyChanged("CITY_NAME")
				Me.OnCITY_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PINCODE", DbType:="VarChar(50)")>  _
	Public Property PINCODE() As String
		Get
			Return Me._PINCODE
		End Get
		Set
			If (String.Equals(Me._PINCODE, value) = false) Then
				Me.OnPINCODEChanging(value)
				Me.SendPropertyChanging
				Me._PINCODE = value
				Me.SendPropertyChanged("PINCODE")
				Me.OnPINCODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", DbType:="Int")>  _
	Public Property ADM_REGISTRATION_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If (Me._ADM_REGISTRATION_ID.Equals(value) = false) Then
				If Me._ADM_REGISTRATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_CITY_ADM_AGENCY_REGISTRATION", Storage:="_ADM_AGENCY_REGISTRATIONs", ThisKey:="ADM_CITY_ID", OtherKey:="ADM_CITY_ID")>  _
	Public Property ADM_AGENCY_REGISTRATIONs() As EntitySet(Of ADM_AGENCY_REGISTRATION)
		Get
			Return Me._ADM_AGENCY_REGISTRATIONs
		End Get
		Set
			Me._ADM_AGENCY_REGISTRATIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_CITY_ADM_CONTACT_US", Storage:="_ADM_CONTACT_US", ThisKey:="ADM_CITY_ID", OtherKey:="ADM_CITY_ID")>  _
	Public Property ADM_CONTACT_US() As EntitySet(Of ADM_CONTACT_US)
		Get
			Return Me._ADM_CONTACT_US
		End Get
		Set
			Me._ADM_CONTACT_US.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_CITY_ADM_CUSTOMER_REGISTRATION", Storage:="_ADM_CUSTOMER_REGISTRATIONs", ThisKey:="ADM_CITY_ID", OtherKey:="ADM_CITY_ID")>  _
	Public Property ADM_CUSTOMER_REGISTRATIONs() As EntitySet(Of ADM_CUSTOMER_REGISTRATION)
		Get
			Return Me._ADM_CUSTOMER_REGISTRATIONs
		End Get
		Set
			Me._ADM_CUSTOMER_REGISTRATIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_CITY_ADM_EMPLOYEE", Storage:="_ADM_EMPLOYEEs", ThisKey:="ADM_CITY_ID", OtherKey:="ADM_CITY_ID")>  _
	Public Property ADM_EMPLOYEEs() As EntitySet(Of ADM_EMPLOYEE)
		Get
			Return Me._ADM_EMPLOYEEs
		End Get
		Set
			Me._ADM_EMPLOYEEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_CITY_ADM_REGISTRATION", Storage:="_ADM_REGISTRATIONs", ThisKey:="ADM_CITY_ID", OtherKey:="ADM_CITY_ID")>  _
	Public Property ADM_REGISTRATIONs() As EntitySet(Of ADM_REGISTRATION)
		Get
			Return Me._ADM_REGISTRATIONs
		End Get
		Set
			Me._ADM_REGISTRATIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_CITY", Storage:="_ADM_REGISTRATION", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID", IsForeignKey:=true)>  _
	Public Property ADM_REGISTRATION() As ADM_REGISTRATION
		Get
			Return Me._ADM_REGISTRATION.Entity
		End Get
		Set
			Dim previousValue As ADM_REGISTRATION = Me._ADM_REGISTRATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_REGISTRATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_REGISTRATION.Entity = Nothing
					previousValue.ADM_CITies.Remove(Me)
				End If
				Me._ADM_REGISTRATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_CITies.Add(Me)
					Me._ADM_REGISTRATION_ID = value.ADM_REGISTRATION_ID
				Else
					Me._ADM_REGISTRATION_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_REGISTRATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ADM_AGENCY_REGISTRATIONs(ByVal entity As ADM_AGENCY_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_CITY = Me
	End Sub
	
	Private Sub detach_ADM_AGENCY_REGISTRATIONs(ByVal entity As ADM_AGENCY_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_CITY = Nothing
	End Sub
	
	Private Sub attach_ADM_CONTACT_US(ByVal entity As ADM_CONTACT_US)
		Me.SendPropertyChanging
		entity.ADM_CITY = Me
	End Sub
	
	Private Sub detach_ADM_CONTACT_US(ByVal entity As ADM_CONTACT_US)
		Me.SendPropertyChanging
		entity.ADM_CITY = Nothing
	End Sub
	
	Private Sub attach_ADM_CUSTOMER_REGISTRATIONs(ByVal entity As ADM_CUSTOMER_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_CITY = Me
	End Sub
	
	Private Sub detach_ADM_CUSTOMER_REGISTRATIONs(ByVal entity As ADM_CUSTOMER_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_CITY = Nothing
	End Sub
	
	Private Sub attach_ADM_EMPLOYEEs(ByVal entity As ADM_EMPLOYEE)
		Me.SendPropertyChanging
		entity.ADM_CITY = Me
	End Sub
	
	Private Sub detach_ADM_EMPLOYEEs(ByVal entity As ADM_EMPLOYEE)
		Me.SendPropertyChanging
		entity.ADM_CITY = Nothing
	End Sub
	
	Private Sub attach_ADM_REGISTRATIONs(ByVal entity As ADM_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_CITY = Me
	End Sub
	
	Private Sub detach_ADM_REGISTRATIONs(ByVal entity As ADM_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_CITY = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_CONTACT_US")>  _
Partial Public Class ADM_CONTACT_US
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_CONTACT_US_ID As Integer
	
	Private _YOUR_NAME As String
	
	Private _MOBILE_NO As String
	
	Private _EMAIL_ID As String
	
	Private _SUBJECT As String
	
	Private _MESSAGE As String
	
	Private _ADM_REGISTRATION_ID As System.Nullable(Of Integer)
	
	Private _ADM_CITY_ID As System.Nullable(Of Integer)
	
	Private _ADM_CITY As EntityRef(Of ADM_CITY)
	
	Private _ADM_REGISTRATION As EntityRef(Of ADM_REGISTRATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_CONTACT_US_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_CONTACT_US_IDChanged()
    End Sub
    Partial Private Sub OnYOUR_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnYOUR_NAMEChanged()
    End Sub
    Partial Private Sub OnMOBILE_NOChanging(value As String)
    End Sub
    Partial Private Sub OnMOBILE_NOChanged()
    End Sub
    Partial Private Sub OnEMAIL_IDChanging(value As String)
    End Sub
    Partial Private Sub OnEMAIL_IDChanged()
    End Sub
    Partial Private Sub OnSUBJECTChanging(value As String)
    End Sub
    Partial Private Sub OnSUBJECTChanged()
    End Sub
    Partial Private Sub OnMESSAGEChanging(value As String)
    End Sub
    Partial Private Sub OnMESSAGEChanged()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    Partial Private Sub OnADM_CITY_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_CITY_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_CITY = CType(Nothing, EntityRef(Of ADM_CITY))
		Me._ADM_REGISTRATION = CType(Nothing, EntityRef(Of ADM_REGISTRATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_CONTACT_US_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_CONTACT_US_ID() As Integer
		Get
			Return Me._ADM_CONTACT_US_ID
		End Get
		Set
			If ((Me._ADM_CONTACT_US_ID = value)  _
						= false) Then
				Me.OnADM_CONTACT_US_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_CONTACT_US_ID = value
				Me.SendPropertyChanged("ADM_CONTACT_US_ID")
				Me.OnADM_CONTACT_US_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YOUR_NAME", DbType:="VarChar(250)")>  _
	Public Property YOUR_NAME() As String
		Get
			Return Me._YOUR_NAME
		End Get
		Set
			If (String.Equals(Me._YOUR_NAME, value) = false) Then
				Me.OnYOUR_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._YOUR_NAME = value
				Me.SendPropertyChanged("YOUR_NAME")
				Me.OnYOUR_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOBILE_NO", DbType:="VarChar(15)")>  _
	Public Property MOBILE_NO() As String
		Get
			Return Me._MOBILE_NO
		End Get
		Set
			If (String.Equals(Me._MOBILE_NO, value) = false) Then
				Me.OnMOBILE_NOChanging(value)
				Me.SendPropertyChanging
				Me._MOBILE_NO = value
				Me.SendPropertyChanged("MOBILE_NO")
				Me.OnMOBILE_NOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL_ID", DbType:="VarChar(50)")>  _
	Public Property EMAIL_ID() As String
		Get
			Return Me._EMAIL_ID
		End Get
		Set
			If (String.Equals(Me._EMAIL_ID, value) = false) Then
				Me.OnEMAIL_IDChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL_ID = value
				Me.SendPropertyChanged("EMAIL_ID")
				Me.OnEMAIL_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SUBJECT", DbType:="VarChar(MAX)")>  _
	Public Property SUBJECT() As String
		Get
			Return Me._SUBJECT
		End Get
		Set
			If (String.Equals(Me._SUBJECT, value) = false) Then
				Me.OnSUBJECTChanging(value)
				Me.SendPropertyChanging
				Me._SUBJECT = value
				Me.SendPropertyChanged("SUBJECT")
				Me.OnSUBJECTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MESSAGE", DbType:="VarChar(MAX)")>  _
	Public Property MESSAGE() As String
		Get
			Return Me._MESSAGE
		End Get
		Set
			If (String.Equals(Me._MESSAGE, value) = false) Then
				Me.OnMESSAGEChanging(value)
				Me.SendPropertyChanging
				Me._MESSAGE = value
				Me.SendPropertyChanged("MESSAGE")
				Me.OnMESSAGEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", DbType:="Int")>  _
	Public Property ADM_REGISTRATION_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If (Me._ADM_REGISTRATION_ID.Equals(value) = false) Then
				If Me._ADM_REGISTRATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_CITY_ID", DbType:="Int")>  _
	Public Property ADM_CITY_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_CITY_ID
		End Get
		Set
			If (Me._ADM_CITY_ID.Equals(value) = false) Then
				If Me._ADM_CITY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_CITY_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_CITY_ID = value
				Me.SendPropertyChanged("ADM_CITY_ID")
				Me.OnADM_CITY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_CITY_ADM_CONTACT_US", Storage:="_ADM_CITY", ThisKey:="ADM_CITY_ID", OtherKey:="ADM_CITY_ID", IsForeignKey:=true)>  _
	Public Property ADM_CITY() As ADM_CITY
		Get
			Return Me._ADM_CITY.Entity
		End Get
		Set
			Dim previousValue As ADM_CITY = Me._ADM_CITY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_CITY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_CITY.Entity = Nothing
					previousValue.ADM_CONTACT_US.Remove(Me)
				End If
				Me._ADM_CITY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_CONTACT_US.Add(Me)
					Me._ADM_CITY_ID = value.ADM_CITY_ID
				Else
					Me._ADM_CITY_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_CITY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_CONTACT_US", Storage:="_ADM_REGISTRATION", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID", IsForeignKey:=true)>  _
	Public Property ADM_REGISTRATION() As ADM_REGISTRATION
		Get
			Return Me._ADM_REGISTRATION.Entity
		End Get
		Set
			Dim previousValue As ADM_REGISTRATION = Me._ADM_REGISTRATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_REGISTRATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_REGISTRATION.Entity = Nothing
					previousValue.ADM_CONTACT_US.Remove(Me)
				End If
				Me._ADM_REGISTRATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_CONTACT_US.Add(Me)
					Me._ADM_REGISTRATION_ID = value.ADM_REGISTRATION_ID
				Else
					Me._ADM_REGISTRATION_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_REGISTRATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_CUSTOMER_REGISTRATION")>  _
Partial Public Class ADM_CUSTOMER_REGISTRATION
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_CUSTOMER_REGISTRATION_ID As Integer
	
	Private _CUSTOMER_NAME As String
	
	Private _MOBILE_NO As String
	
	Private _EMAIL_ID As String
	
	Private _PASSWORD As String
	
	Private _ADDRESS As String
	
	Private _ADM_CITY_ID As System.Nullable(Of Integer)
	
	Private _ADM_REGISTRATION_ID As System.Nullable(Of Integer)
	
	Private _ADM_CITY As EntityRef(Of ADM_CITY)
	
	Private _ADM_REGISTRATION As EntityRef(Of ADM_REGISTRATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_CUSTOMER_REGISTRATION_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_CUSTOMER_REGISTRATION_IDChanged()
    End Sub
    Partial Private Sub OnCUSTOMER_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnCUSTOMER_NAMEChanged()
    End Sub
    Partial Private Sub OnMOBILE_NOChanging(value As String)
    End Sub
    Partial Private Sub OnMOBILE_NOChanged()
    End Sub
    Partial Private Sub OnEMAIL_IDChanging(value As String)
    End Sub
    Partial Private Sub OnEMAIL_IDChanged()
    End Sub
    Partial Private Sub OnPASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnPASSWORDChanged()
    End Sub
    Partial Private Sub OnADDRESSChanging(value As String)
    End Sub
    Partial Private Sub OnADDRESSChanged()
    End Sub
    Partial Private Sub OnADM_CITY_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_CITY_IDChanged()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_CITY = CType(Nothing, EntityRef(Of ADM_CITY))
		Me._ADM_REGISTRATION = CType(Nothing, EntityRef(Of ADM_REGISTRATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_CUSTOMER_REGISTRATION_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_CUSTOMER_REGISTRATION_ID() As Integer
		Get
			Return Me._ADM_CUSTOMER_REGISTRATION_ID
		End Get
		Set
			If ((Me._ADM_CUSTOMER_REGISTRATION_ID = value)  _
						= false) Then
				Me.OnADM_CUSTOMER_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_CUSTOMER_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_CUSTOMER_REGISTRATION_ID")
				Me.OnADM_CUSTOMER_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUSTOMER_NAME", DbType:="VarChar(250)")>  _
	Public Property CUSTOMER_NAME() As String
		Get
			Return Me._CUSTOMER_NAME
		End Get
		Set
			If (String.Equals(Me._CUSTOMER_NAME, value) = false) Then
				Me.OnCUSTOMER_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._CUSTOMER_NAME = value
				Me.SendPropertyChanged("CUSTOMER_NAME")
				Me.OnCUSTOMER_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOBILE_NO", DbType:="VarChar(15)")>  _
	Public Property MOBILE_NO() As String
		Get
			Return Me._MOBILE_NO
		End Get
		Set
			If (String.Equals(Me._MOBILE_NO, value) = false) Then
				Me.OnMOBILE_NOChanging(value)
				Me.SendPropertyChanging
				Me._MOBILE_NO = value
				Me.SendPropertyChanged("MOBILE_NO")
				Me.OnMOBILE_NOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL_ID", DbType:="VarChar(50)")>  _
	Public Property EMAIL_ID() As String
		Get
			Return Me._EMAIL_ID
		End Get
		Set
			If (String.Equals(Me._EMAIL_ID, value) = false) Then
				Me.OnEMAIL_IDChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL_ID = value
				Me.SendPropertyChanged("EMAIL_ID")
				Me.OnEMAIL_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PASSWORD", DbType:="VarChar(50)")>  _
	Public Property PASSWORD() As String
		Get
			Return Me._PASSWORD
		End Get
		Set
			If (String.Equals(Me._PASSWORD, value) = false) Then
				Me.OnPASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._PASSWORD = value
				Me.SendPropertyChanged("PASSWORD")
				Me.OnPASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADDRESS", DbType:="VarChar(250)")>  _
	Public Property ADDRESS() As String
		Get
			Return Me._ADDRESS
		End Get
		Set
			If (String.Equals(Me._ADDRESS, value) = false) Then
				Me.OnADDRESSChanging(value)
				Me.SendPropertyChanging
				Me._ADDRESS = value
				Me.SendPropertyChanged("ADDRESS")
				Me.OnADDRESSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_CITY_ID", DbType:="Int")>  _
	Public Property ADM_CITY_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_CITY_ID
		End Get
		Set
			If (Me._ADM_CITY_ID.Equals(value) = false) Then
				If Me._ADM_CITY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_CITY_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_CITY_ID = value
				Me.SendPropertyChanged("ADM_CITY_ID")
				Me.OnADM_CITY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", DbType:="Int")>  _
	Public Property ADM_REGISTRATION_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If (Me._ADM_REGISTRATION_ID.Equals(value) = false) Then
				If Me._ADM_REGISTRATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_CITY_ADM_CUSTOMER_REGISTRATION", Storage:="_ADM_CITY", ThisKey:="ADM_CITY_ID", OtherKey:="ADM_CITY_ID", IsForeignKey:=true)>  _
	Public Property ADM_CITY() As ADM_CITY
		Get
			Return Me._ADM_CITY.Entity
		End Get
		Set
			Dim previousValue As ADM_CITY = Me._ADM_CITY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_CITY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_CITY.Entity = Nothing
					previousValue.ADM_CUSTOMER_REGISTRATIONs.Remove(Me)
				End If
				Me._ADM_CITY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_CUSTOMER_REGISTRATIONs.Add(Me)
					Me._ADM_CITY_ID = value.ADM_CITY_ID
				Else
					Me._ADM_CITY_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_CITY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_CUSTOMER_REGISTRATION", Storage:="_ADM_REGISTRATION", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID", IsForeignKey:=true)>  _
	Public Property ADM_REGISTRATION() As ADM_REGISTRATION
		Get
			Return Me._ADM_REGISTRATION.Entity
		End Get
		Set
			Dim previousValue As ADM_REGISTRATION = Me._ADM_REGISTRATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_REGISTRATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_REGISTRATION.Entity = Nothing
					previousValue.ADM_CUSTOMER_REGISTRATIONs.Remove(Me)
				End If
				Me._ADM_REGISTRATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_CUSTOMER_REGISTRATIONs.Add(Me)
					Me._ADM_REGISTRATION_ID = value.ADM_REGISTRATION_ID
				Else
					Me._ADM_REGISTRATION_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_REGISTRATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_CUSTOMIZE_PACKAGE")>  _
Partial Public Class ADM_CUSTOMIZE_PACKAGE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_CUSTOMIZE_PACKAGE_ID As Integer
	
	Private _AGENCY_TYPE_ID As System.Nullable(Of Integer)
	
	Private _CUSTOMIZE_PACKAGE_NAME As String
	
	Private _PRICE As String
	
	Private _ADM_REGISTRATION_ID As System.Nullable(Of Integer)
	
	Private _ADM_REGISTRATION As EntityRef(Of ADM_REGISTRATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_CUSTOMIZE_PACKAGE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_CUSTOMIZE_PACKAGE_IDChanged()
    End Sub
    Partial Private Sub OnAGENCY_TYPE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAGENCY_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnCUSTOMIZE_PACKAGE_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnCUSTOMIZE_PACKAGE_NAMEChanged()
    End Sub
    Partial Private Sub OnPRICEChanging(value As String)
    End Sub
    Partial Private Sub OnPRICEChanged()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_REGISTRATION = CType(Nothing, EntityRef(Of ADM_REGISTRATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_CUSTOMIZE_PACKAGE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_CUSTOMIZE_PACKAGE_ID() As Integer
		Get
			Return Me._ADM_CUSTOMIZE_PACKAGE_ID
		End Get
		Set
			If ((Me._ADM_CUSTOMIZE_PACKAGE_ID = value)  _
						= false) Then
				Me.OnADM_CUSTOMIZE_PACKAGE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_CUSTOMIZE_PACKAGE_ID = value
				Me.SendPropertyChanged("ADM_CUSTOMIZE_PACKAGE_ID")
				Me.OnADM_CUSTOMIZE_PACKAGE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AGENCY_TYPE_ID", DbType:="Int")>  _
	Public Property AGENCY_TYPE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._AGENCY_TYPE_ID
		End Get
		Set
			If (Me._AGENCY_TYPE_ID.Equals(value) = false) Then
				Me.OnAGENCY_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._AGENCY_TYPE_ID = value
				Me.SendPropertyChanged("AGENCY_TYPE_ID")
				Me.OnAGENCY_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUSTOMIZE_PACKAGE_NAME", DbType:="VarChar(50)")>  _
	Public Property CUSTOMIZE_PACKAGE_NAME() As String
		Get
			Return Me._CUSTOMIZE_PACKAGE_NAME
		End Get
		Set
			If (String.Equals(Me._CUSTOMIZE_PACKAGE_NAME, value) = false) Then
				Me.OnCUSTOMIZE_PACKAGE_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._CUSTOMIZE_PACKAGE_NAME = value
				Me.SendPropertyChanged("CUSTOMIZE_PACKAGE_NAME")
				Me.OnCUSTOMIZE_PACKAGE_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRICE", DbType:="VarChar(50)")>  _
	Public Property PRICE() As String
		Get
			Return Me._PRICE
		End Get
		Set
			If (String.Equals(Me._PRICE, value) = false) Then
				Me.OnPRICEChanging(value)
				Me.SendPropertyChanging
				Me._PRICE = value
				Me.SendPropertyChanged("PRICE")
				Me.OnPRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", DbType:="Int")>  _
	Public Property ADM_REGISTRATION_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If (Me._ADM_REGISTRATION_ID.Equals(value) = false) Then
				If Me._ADM_REGISTRATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_CUSTOMIZE_PACKAGE", Storage:="_ADM_REGISTRATION", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID", IsForeignKey:=true)>  _
	Public Property ADM_REGISTRATION() As ADM_REGISTRATION
		Get
			Return Me._ADM_REGISTRATION.Entity
		End Get
		Set
			Dim previousValue As ADM_REGISTRATION = Me._ADM_REGISTRATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_REGISTRATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_REGISTRATION.Entity = Nothing
					previousValue.ADM_CUSTOMIZE_PACKAGEs.Remove(Me)
				End If
				Me._ADM_REGISTRATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_CUSTOMIZE_PACKAGEs.Add(Me)
					Me._ADM_REGISTRATION_ID = value.ADM_REGISTRATION_ID
				Else
					Me._ADM_REGISTRATION_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_REGISTRATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_EMPLOYEE")>  _
Partial Public Class ADM_EMPLOYEE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_EMPLOYEE_ID As Integer
	
	Private _EMPLOYEE_NAME As String
	
	Private _MOBILE_NO As String
	
	Private _EMAIL_ID As String
	
	Private _PASSWORD As String
	
	Private _ADDRESS As String
	
	Private _ADM_REGISTRATION_ID As System.Nullable(Of Integer)
	
	Private _ADM_CITY_ID As System.Nullable(Of Integer)
	
	Private _ADM_EMPLOYEE_ATH_ID As String
	
	Private _ADM_CITY As EntityRef(Of ADM_CITY)
	
	Private _ADM_REGISTRATION As EntityRef(Of ADM_REGISTRATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_EMPLOYEE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_EMPLOYEE_IDChanged()
    End Sub
    Partial Private Sub OnEMPLOYEE_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnEMPLOYEE_NAMEChanged()
    End Sub
    Partial Private Sub OnMOBILE_NOChanging(value As String)
    End Sub
    Partial Private Sub OnMOBILE_NOChanged()
    End Sub
    Partial Private Sub OnEMAIL_IDChanging(value As String)
    End Sub
    Partial Private Sub OnEMAIL_IDChanged()
    End Sub
    Partial Private Sub OnPASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnPASSWORDChanged()
    End Sub
    Partial Private Sub OnADDRESSChanging(value As String)
    End Sub
    Partial Private Sub OnADDRESSChanged()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    Partial Private Sub OnADM_CITY_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_CITY_IDChanged()
    End Sub
    Partial Private Sub OnADM_EMPLOYEE_ATH_IDChanging(value As String)
    End Sub
    Partial Private Sub OnADM_EMPLOYEE_ATH_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_CITY = CType(Nothing, EntityRef(Of ADM_CITY))
		Me._ADM_REGISTRATION = CType(Nothing, EntityRef(Of ADM_REGISTRATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_EMPLOYEE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_EMPLOYEE_ID() As Integer
		Get
			Return Me._ADM_EMPLOYEE_ID
		End Get
		Set
			If ((Me._ADM_EMPLOYEE_ID = value)  _
						= false) Then
				Me.OnADM_EMPLOYEE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_EMPLOYEE_ID = value
				Me.SendPropertyChanged("ADM_EMPLOYEE_ID")
				Me.OnADM_EMPLOYEE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMPLOYEE_NAME", DbType:="VarChar(250)")>  _
	Public Property EMPLOYEE_NAME() As String
		Get
			Return Me._EMPLOYEE_NAME
		End Get
		Set
			If (String.Equals(Me._EMPLOYEE_NAME, value) = false) Then
				Me.OnEMPLOYEE_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._EMPLOYEE_NAME = value
				Me.SendPropertyChanged("EMPLOYEE_NAME")
				Me.OnEMPLOYEE_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOBILE_NO", DbType:="VarChar(15)")>  _
	Public Property MOBILE_NO() As String
		Get
			Return Me._MOBILE_NO
		End Get
		Set
			If (String.Equals(Me._MOBILE_NO, value) = false) Then
				Me.OnMOBILE_NOChanging(value)
				Me.SendPropertyChanging
				Me._MOBILE_NO = value
				Me.SendPropertyChanged("MOBILE_NO")
				Me.OnMOBILE_NOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL_ID", DbType:="VarChar(50)")>  _
	Public Property EMAIL_ID() As String
		Get
			Return Me._EMAIL_ID
		End Get
		Set
			If (String.Equals(Me._EMAIL_ID, value) = false) Then
				Me.OnEMAIL_IDChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL_ID = value
				Me.SendPropertyChanged("EMAIL_ID")
				Me.OnEMAIL_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PASSWORD", DbType:="VarChar(50)")>  _
	Public Property PASSWORD() As String
		Get
			Return Me._PASSWORD
		End Get
		Set
			If (String.Equals(Me._PASSWORD, value) = false) Then
				Me.OnPASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._PASSWORD = value
				Me.SendPropertyChanged("PASSWORD")
				Me.OnPASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADDRESS", DbType:="VarChar(250)")>  _
	Public Property ADDRESS() As String
		Get
			Return Me._ADDRESS
		End Get
		Set
			If (String.Equals(Me._ADDRESS, value) = false) Then
				Me.OnADDRESSChanging(value)
				Me.SendPropertyChanging
				Me._ADDRESS = value
				Me.SendPropertyChanged("ADDRESS")
				Me.OnADDRESSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", DbType:="Int")>  _
	Public Property ADM_REGISTRATION_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If (Me._ADM_REGISTRATION_ID.Equals(value) = false) Then
				If Me._ADM_REGISTRATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_CITY_ID", DbType:="Int")>  _
	Public Property ADM_CITY_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_CITY_ID
		End Get
		Set
			If (Me._ADM_CITY_ID.Equals(value) = false) Then
				If Me._ADM_CITY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_CITY_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_CITY_ID = value
				Me.SendPropertyChanged("ADM_CITY_ID")
				Me.OnADM_CITY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_EMPLOYEE_ATH_ID", DbType:="VarChar(50)")>  _
	Public Property ADM_EMPLOYEE_ATH_ID() As String
		Get
			Return Me._ADM_EMPLOYEE_ATH_ID
		End Get
		Set
			If (String.Equals(Me._ADM_EMPLOYEE_ATH_ID, value) = false) Then
				Me.OnADM_EMPLOYEE_ATH_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_EMPLOYEE_ATH_ID = value
				Me.SendPropertyChanged("ADM_EMPLOYEE_ATH_ID")
				Me.OnADM_EMPLOYEE_ATH_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_CITY_ADM_EMPLOYEE", Storage:="_ADM_CITY", ThisKey:="ADM_CITY_ID", OtherKey:="ADM_CITY_ID", IsForeignKey:=true)>  _
	Public Property ADM_CITY() As ADM_CITY
		Get
			Return Me._ADM_CITY.Entity
		End Get
		Set
			Dim previousValue As ADM_CITY = Me._ADM_CITY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_CITY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_CITY.Entity = Nothing
					previousValue.ADM_EMPLOYEEs.Remove(Me)
				End If
				Me._ADM_CITY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_EMPLOYEEs.Add(Me)
					Me._ADM_CITY_ID = value.ADM_CITY_ID
				Else
					Me._ADM_CITY_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_CITY")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_EMPLOYEE", Storage:="_ADM_REGISTRATION", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID", IsForeignKey:=true)>  _
	Public Property ADM_REGISTRATION() As ADM_REGISTRATION
		Get
			Return Me._ADM_REGISTRATION.Entity
		End Get
		Set
			Dim previousValue As ADM_REGISTRATION = Me._ADM_REGISTRATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_REGISTRATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_REGISTRATION.Entity = Nothing
					previousValue.ADM_EMPLOYEEs.Remove(Me)
				End If
				Me._ADM_REGISTRATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_EMPLOYEEs.Add(Me)
					Me._ADM_REGISTRATION_ID = value.ADM_REGISTRATION_ID
				Else
					Me._ADM_REGISTRATION_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_REGISTRATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_EMPLOYEE_TYPE")>  _
Partial Public Class ADM_EMPLOYEE_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_EMPLOYEE_TYPE_ID As Integer
	
	Private _EMPLOYEE_TYPE As String
	
	Private _REMARKS As String
	
	Private _ADM_REGISTRATION_ID As System.Nullable(Of Integer)
	
	Private _ADM_REGISTRATION As EntityRef(Of ADM_REGISTRATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_EMPLOYEE_TYPE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_EMPLOYEE_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnEMPLOYEE_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnEMPLOYEE_TYPEChanged()
    End Sub
    Partial Private Sub OnREMARKSChanging(value As String)
    End Sub
    Partial Private Sub OnREMARKSChanged()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_REGISTRATION = CType(Nothing, EntityRef(Of ADM_REGISTRATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_EMPLOYEE_TYPE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_EMPLOYEE_TYPE_ID() As Integer
		Get
			Return Me._ADM_EMPLOYEE_TYPE_ID
		End Get
		Set
			If ((Me._ADM_EMPLOYEE_TYPE_ID = value)  _
						= false) Then
				Me.OnADM_EMPLOYEE_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_EMPLOYEE_TYPE_ID = value
				Me.SendPropertyChanged("ADM_EMPLOYEE_TYPE_ID")
				Me.OnADM_EMPLOYEE_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMPLOYEE_TYPE", DbType:="VarChar(50)")>  _
	Public Property EMPLOYEE_TYPE() As String
		Get
			Return Me._EMPLOYEE_TYPE
		End Get
		Set
			If (String.Equals(Me._EMPLOYEE_TYPE, value) = false) Then
				Me.OnEMPLOYEE_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._EMPLOYEE_TYPE = value
				Me.SendPropertyChanged("EMPLOYEE_TYPE")
				Me.OnEMPLOYEE_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REMARKS", DbType:="VarChar(MAX)")>  _
	Public Property REMARKS() As String
		Get
			Return Me._REMARKS
		End Get
		Set
			If (String.Equals(Me._REMARKS, value) = false) Then
				Me.OnREMARKSChanging(value)
				Me.SendPropertyChanging
				Me._REMARKS = value
				Me.SendPropertyChanged("REMARKS")
				Me.OnREMARKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", DbType:="Int")>  _
	Public Property ADM_REGISTRATION_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If (Me._ADM_REGISTRATION_ID.Equals(value) = false) Then
				If Me._ADM_REGISTRATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_EMPLOYEE_TYPE", Storage:="_ADM_REGISTRATION", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID", IsForeignKey:=true)>  _
	Public Property ADM_REGISTRATION() As ADM_REGISTRATION
		Get
			Return Me._ADM_REGISTRATION.Entity
		End Get
		Set
			Dim previousValue As ADM_REGISTRATION = Me._ADM_REGISTRATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_REGISTRATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_REGISTRATION.Entity = Nothing
					previousValue.ADM_EMPLOYEE_TYPEs.Remove(Me)
				End If
				Me._ADM_REGISTRATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_EMPLOYEE_TYPEs.Add(Me)
					Me._ADM_REGISTRATION_ID = value.ADM_REGISTRATION_ID
				Else
					Me._ADM_REGISTRATION_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_REGISTRATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_INQUIRY")>  _
Partial Public Class ADM_INQUIRY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_INQUIRY_ID As Integer
	
	Private _NAME As String
	
	Private _MOBILE_NO As String
	
	Private _EMAIL_ID As String
	
	Private _FUNCATION_DATE As String
	
	Private _FUNCATION_TYPE As String
	
	Private _ADDRESS As String
	
	Private _REMARKS As String
	
	Private _ADM_REGISTRATION_ID As Integer
	
	Private _ADM_REGISTRATION As EntityRef(Of ADM_REGISTRATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_INQUIRY_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_INQUIRY_IDChanged()
    End Sub
    Partial Private Sub OnNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnNAMEChanged()
    End Sub
    Partial Private Sub OnMOBILE_NOChanging(value As String)
    End Sub
    Partial Private Sub OnMOBILE_NOChanged()
    End Sub
    Partial Private Sub OnEMAIL_IDChanging(value As String)
    End Sub
    Partial Private Sub OnEMAIL_IDChanged()
    End Sub
    Partial Private Sub OnFUNCATION_DATEChanging(value As String)
    End Sub
    Partial Private Sub OnFUNCATION_DATEChanged()
    End Sub
    Partial Private Sub OnFUNCATION_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnFUNCATION_TYPEChanged()
    End Sub
    Partial Private Sub OnADDRESSChanging(value As String)
    End Sub
    Partial Private Sub OnADDRESSChanged()
    End Sub
    Partial Private Sub OnREMARKSChanging(value As String)
    End Sub
    Partial Private Sub OnREMARKSChanged()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_REGISTRATION = CType(Nothing, EntityRef(Of ADM_REGISTRATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_INQUIRY_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ADM_INQUIRY_ID() As Integer
		Get
			Return Me._ADM_INQUIRY_ID
		End Get
		Set
			If ((Me._ADM_INQUIRY_ID = value)  _
						= false) Then
				Me.OnADM_INQUIRY_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_INQUIRY_ID = value
				Me.SendPropertyChanged("ADM_INQUIRY_ID")
				Me.OnADM_INQUIRY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NAME", DbType:="VarChar(50)")>  _
	Public Property NAME() As String
		Get
			Return Me._NAME
		End Get
		Set
			If (String.Equals(Me._NAME, value) = false) Then
				Me.OnNAMEChanging(value)
				Me.SendPropertyChanging
				Me._NAME = value
				Me.SendPropertyChanged("NAME")
				Me.OnNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOBILE_NO", DbType:="VarChar(50)")>  _
	Public Property MOBILE_NO() As String
		Get
			Return Me._MOBILE_NO
		End Get
		Set
			If (String.Equals(Me._MOBILE_NO, value) = false) Then
				Me.OnMOBILE_NOChanging(value)
				Me.SendPropertyChanging
				Me._MOBILE_NO = value
				Me.SendPropertyChanged("MOBILE_NO")
				Me.OnMOBILE_NOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL_ID", DbType:="VarChar(50)")>  _
	Public Property EMAIL_ID() As String
		Get
			Return Me._EMAIL_ID
		End Get
		Set
			If (String.Equals(Me._EMAIL_ID, value) = false) Then
				Me.OnEMAIL_IDChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL_ID = value
				Me.SendPropertyChanged("EMAIL_ID")
				Me.OnEMAIL_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FUNCATION_DATE", DbType:="VarChar(50)")>  _
	Public Property FUNCATION_DATE() As String
		Get
			Return Me._FUNCATION_DATE
		End Get
		Set
			If (String.Equals(Me._FUNCATION_DATE, value) = false) Then
				Me.OnFUNCATION_DATEChanging(value)
				Me.SendPropertyChanging
				Me._FUNCATION_DATE = value
				Me.SendPropertyChanged("FUNCATION_DATE")
				Me.OnFUNCATION_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FUNCATION_TYPE", DbType:="NChar(10)")>  _
	Public Property FUNCATION_TYPE() As String
		Get
			Return Me._FUNCATION_TYPE
		End Get
		Set
			If (String.Equals(Me._FUNCATION_TYPE, value) = false) Then
				Me.OnFUNCATION_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._FUNCATION_TYPE = value
				Me.SendPropertyChanged("FUNCATION_TYPE")
				Me.OnFUNCATION_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADDRESS", DbType:="VarChar(50)")>  _
	Public Property ADDRESS() As String
		Get
			Return Me._ADDRESS
		End Get
		Set
			If (String.Equals(Me._ADDRESS, value) = false) Then
				Me.OnADDRESSChanging(value)
				Me.SendPropertyChanging
				Me._ADDRESS = value
				Me.SendPropertyChanged("ADDRESS")
				Me.OnADDRESSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REMARKS", DbType:="VarChar(50)")>  _
	Public Property REMARKS() As String
		Get
			Return Me._REMARKS
		End Get
		Set
			If (String.Equals(Me._REMARKS, value) = false) Then
				Me.OnREMARKSChanging(value)
				Me.SendPropertyChanging
				Me._REMARKS = value
				Me.SendPropertyChanged("REMARKS")
				Me.OnREMARKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ADM_REGISTRATION_ID() As Integer
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If ((Me._ADM_REGISTRATION_ID = value)  _
						= false) Then
				If Me._ADM_REGISTRATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_INQUIRY", Storage:="_ADM_REGISTRATION", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID", IsForeignKey:=true)>  _
	Public Property ADM_REGISTRATION() As ADM_REGISTRATION
		Get
			Return Me._ADM_REGISTRATION.Entity
		End Get
		Set
			Dim previousValue As ADM_REGISTRATION = Me._ADM_REGISTRATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_REGISTRATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_REGISTRATION.Entity = Nothing
					previousValue.ADM_INQUIRies.Remove(Me)
				End If
				Me._ADM_REGISTRATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_INQUIRies.Add(Me)
					Me._ADM_REGISTRATION_ID = value.ADM_REGISTRATION_ID
				Else
					Me._ADM_REGISTRATION_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ADM_REGISTRATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_PACKAGE_MASTER")>  _
Partial Public Class ADM_PACKAGE_MASTER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_PACKAGE_MASTER_ID As Integer
	
	Private _ADM_PACKAGE_TYPE_ID As System.Nullable(Of Integer)
	
	Private _PACKAGE_NAME As String
	
	Private _MRP As String
	
	Private _SELLING_PRICE As String
	
	Private _PACKAGE_DETAILS As String
	
	Private _REMARKS As String
	
	Private _ADM_PACKAGE_TYPE As EntityRef(Of ADM_PACKAGE_TYPE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_PACKAGE_MASTER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_PACKAGE_MASTER_IDChanged()
    End Sub
    Partial Private Sub OnADM_PACKAGE_TYPE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_PACKAGE_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnPACKAGE_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnPACKAGE_NAMEChanged()
    End Sub
    Partial Private Sub OnMRPChanging(value As String)
    End Sub
    Partial Private Sub OnMRPChanged()
    End Sub
    Partial Private Sub OnSELLING_PRICEChanging(value As String)
    End Sub
    Partial Private Sub OnSELLING_PRICEChanged()
    End Sub
    Partial Private Sub OnPACKAGE_DETAILSChanging(value As String)
    End Sub
    Partial Private Sub OnPACKAGE_DETAILSChanged()
    End Sub
    Partial Private Sub OnREMARKSChanging(value As String)
    End Sub
    Partial Private Sub OnREMARKSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_PACKAGE_TYPE = CType(Nothing, EntityRef(Of ADM_PACKAGE_TYPE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_PACKAGE_MASTER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_PACKAGE_MASTER_ID() As Integer
		Get
			Return Me._ADM_PACKAGE_MASTER_ID
		End Get
		Set
			If ((Me._ADM_PACKAGE_MASTER_ID = value)  _
						= false) Then
				Me.OnADM_PACKAGE_MASTER_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_PACKAGE_MASTER_ID = value
				Me.SendPropertyChanged("ADM_PACKAGE_MASTER_ID")
				Me.OnADM_PACKAGE_MASTER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_PACKAGE_TYPE_ID", DbType:="Int")>  _
	Public Property ADM_PACKAGE_TYPE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_PACKAGE_TYPE_ID
		End Get
		Set
			If (Me._ADM_PACKAGE_TYPE_ID.Equals(value) = false) Then
				If Me._ADM_PACKAGE_TYPE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_PACKAGE_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_PACKAGE_TYPE_ID = value
				Me.SendPropertyChanged("ADM_PACKAGE_TYPE_ID")
				Me.OnADM_PACKAGE_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PACKAGE_NAME", DbType:="VarChar(50)")>  _
	Public Property PACKAGE_NAME() As String
		Get
			Return Me._PACKAGE_NAME
		End Get
		Set
			If (String.Equals(Me._PACKAGE_NAME, value) = false) Then
				Me.OnPACKAGE_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._PACKAGE_NAME = value
				Me.SendPropertyChanged("PACKAGE_NAME")
				Me.OnPACKAGE_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MRP", DbType:="VarChar(50)")>  _
	Public Property MRP() As String
		Get
			Return Me._MRP
		End Get
		Set
			If (String.Equals(Me._MRP, value) = false) Then
				Me.OnMRPChanging(value)
				Me.SendPropertyChanging
				Me._MRP = value
				Me.SendPropertyChanged("MRP")
				Me.OnMRPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SELLING_PRICE", DbType:="VarChar(50)")>  _
	Public Property SELLING_PRICE() As String
		Get
			Return Me._SELLING_PRICE
		End Get
		Set
			If (String.Equals(Me._SELLING_PRICE, value) = false) Then
				Me.OnSELLING_PRICEChanging(value)
				Me.SendPropertyChanging
				Me._SELLING_PRICE = value
				Me.SendPropertyChanged("SELLING_PRICE")
				Me.OnSELLING_PRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PACKAGE_DETAILS", DbType:="VarChar(50)")>  _
	Public Property PACKAGE_DETAILS() As String
		Get
			Return Me._PACKAGE_DETAILS
		End Get
		Set
			If (String.Equals(Me._PACKAGE_DETAILS, value) = false) Then
				Me.OnPACKAGE_DETAILSChanging(value)
				Me.SendPropertyChanging
				Me._PACKAGE_DETAILS = value
				Me.SendPropertyChanged("PACKAGE_DETAILS")
				Me.OnPACKAGE_DETAILSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REMARKS", DbType:="VarChar(50)")>  _
	Public Property REMARKS() As String
		Get
			Return Me._REMARKS
		End Get
		Set
			If (String.Equals(Me._REMARKS, value) = false) Then
				Me.OnREMARKSChanging(value)
				Me.SendPropertyChanging
				Me._REMARKS = value
				Me.SendPropertyChanged("REMARKS")
				Me.OnREMARKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_PACKAGE_TYPE_ADM_PACKAGE_MASTER", Storage:="_ADM_PACKAGE_TYPE", ThisKey:="ADM_PACKAGE_TYPE_ID", OtherKey:="ADM_PACKAGE_TYPE_ID", IsForeignKey:=true)>  _
	Public Property ADM_PACKAGE_TYPE() As ADM_PACKAGE_TYPE
		Get
			Return Me._ADM_PACKAGE_TYPE.Entity
		End Get
		Set
			Dim previousValue As ADM_PACKAGE_TYPE = Me._ADM_PACKAGE_TYPE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_PACKAGE_TYPE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_PACKAGE_TYPE.Entity = Nothing
					previousValue.ADM_PACKAGE_MASTERs.Remove(Me)
				End If
				Me._ADM_PACKAGE_TYPE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_PACKAGE_MASTERs.Add(Me)
					Me._ADM_PACKAGE_TYPE_ID = value.ADM_PACKAGE_TYPE_ID
				Else
					Me._ADM_PACKAGE_TYPE_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_PACKAGE_TYPE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_PACKAGE_TYPE")>  _
Partial Public Class ADM_PACKAGE_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_PACKAGE_TYPE_ID As Integer
	
	Private _PACKAGE_TYPE As String
	
	Private _REAMARKS As String
	
	Private _ADM_REGISTRATION_ID As System.Nullable(Of Integer)
	
	Private _ADM_PACKAGE_MASTERs As EntitySet(Of ADM_PACKAGE_MASTER)
	
	Private _ADM_REGISTRATION As EntityRef(Of ADM_REGISTRATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_PACKAGE_TYPE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_PACKAGE_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnPACKAGE_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnPACKAGE_TYPEChanged()
    End Sub
    Partial Private Sub OnREAMARKSChanging(value As String)
    End Sub
    Partial Private Sub OnREAMARKSChanged()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_PACKAGE_MASTERs = New EntitySet(Of ADM_PACKAGE_MASTER)(AddressOf Me.attach_ADM_PACKAGE_MASTERs, AddressOf Me.detach_ADM_PACKAGE_MASTERs)
		Me._ADM_REGISTRATION = CType(Nothing, EntityRef(Of ADM_REGISTRATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_PACKAGE_TYPE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_PACKAGE_TYPE_ID() As Integer
		Get
			Return Me._ADM_PACKAGE_TYPE_ID
		End Get
		Set
			If ((Me._ADM_PACKAGE_TYPE_ID = value)  _
						= false) Then
				Me.OnADM_PACKAGE_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_PACKAGE_TYPE_ID = value
				Me.SendPropertyChanged("ADM_PACKAGE_TYPE_ID")
				Me.OnADM_PACKAGE_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PACKAGE_TYPE", DbType:="VarChar(50)")>  _
	Public Property PACKAGE_TYPE() As String
		Get
			Return Me._PACKAGE_TYPE
		End Get
		Set
			If (String.Equals(Me._PACKAGE_TYPE, value) = false) Then
				Me.OnPACKAGE_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._PACKAGE_TYPE = value
				Me.SendPropertyChanged("PACKAGE_TYPE")
				Me.OnPACKAGE_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REAMARKS", DbType:="VarChar(50)")>  _
	Public Property REAMARKS() As String
		Get
			Return Me._REAMARKS
		End Get
		Set
			If (String.Equals(Me._REAMARKS, value) = false) Then
				Me.OnREAMARKSChanging(value)
				Me.SendPropertyChanging
				Me._REAMARKS = value
				Me.SendPropertyChanged("REAMARKS")
				Me.OnREAMARKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", DbType:="Int")>  _
	Public Property ADM_REGISTRATION_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If (Me._ADM_REGISTRATION_ID.Equals(value) = false) Then
				If Me._ADM_REGISTRATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_PACKAGE_TYPE_ADM_PACKAGE_MASTER", Storage:="_ADM_PACKAGE_MASTERs", ThisKey:="ADM_PACKAGE_TYPE_ID", OtherKey:="ADM_PACKAGE_TYPE_ID")>  _
	Public Property ADM_PACKAGE_MASTERs() As EntitySet(Of ADM_PACKAGE_MASTER)
		Get
			Return Me._ADM_PACKAGE_MASTERs
		End Get
		Set
			Me._ADM_PACKAGE_MASTERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_PACKAGE_TYPE", Storage:="_ADM_REGISTRATION", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID", IsForeignKey:=true)>  _
	Public Property ADM_REGISTRATION() As ADM_REGISTRATION
		Get
			Return Me._ADM_REGISTRATION.Entity
		End Get
		Set
			Dim previousValue As ADM_REGISTRATION = Me._ADM_REGISTRATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_REGISTRATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_REGISTRATION.Entity = Nothing
					previousValue.ADM_PACKAGE_TYPEs.Remove(Me)
				End If
				Me._ADM_REGISTRATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_PACKAGE_TYPEs.Add(Me)
					Me._ADM_REGISTRATION_ID = value.ADM_REGISTRATION_ID
				Else
					Me._ADM_REGISTRATION_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_REGISTRATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ADM_PACKAGE_MASTERs(ByVal entity As ADM_PACKAGE_MASTER)
		Me.SendPropertyChanging
		entity.ADM_PACKAGE_TYPE = Me
	End Sub
	
	Private Sub detach_ADM_PACKAGE_MASTERs(ByVal entity As ADM_PACKAGE_MASTER)
		Me.SendPropertyChanging
		entity.ADM_PACKAGE_TYPE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADM_REGISTRATION")>  _
Partial Public Class ADM_REGISTRATION
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ADM_REGISTRATION_ID As Integer
	
	Private _REGISTRATION_NAME As String
	
	Private _MOBILE_NO As String
	
	Private _EMAIL_ID As String
	
	Private _PASSWORD As String
	
	Private _GENDER As String
	
	Private _ADDRESS As String
	
	Private _ADM_ATH_ID As String
	
	Private _ADM_CITY_ID As System.Nullable(Of Integer)
	
	Private _ADM_AGENCY_REGISTRATIONs As EntitySet(Of ADM_AGENCY_REGISTRATION)
	
	Private _ADM_AGENCY_TYPEs As EntitySet(Of ADM_AGENCY_TYPE)
	
	Private _ADM_CITies As EntitySet(Of ADM_CITY)
	
	Private _ADM_CONTACT_US As EntitySet(Of ADM_CONTACT_US)
	
	Private _ADM_CUSTOMER_REGISTRATIONs As EntitySet(Of ADM_CUSTOMER_REGISTRATION)
	
	Private _ADM_CUSTOMIZE_PACKAGEs As EntitySet(Of ADM_CUSTOMIZE_PACKAGE)
	
	Private _ADM_EMPLOYEEs As EntitySet(Of ADM_EMPLOYEE)
	
	Private _ADM_EMPLOYEE_TYPEs As EntitySet(Of ADM_EMPLOYEE_TYPE)
	
	Private _ADM_INQUIRies As EntitySet(Of ADM_INQUIRY)
	
	Private _ADM_PACKAGE_TYPEs As EntitySet(Of ADM_PACKAGE_TYPE)
	
	Private _ADM_CITY As EntityRef(Of ADM_CITY)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnADM_REGISTRATION_IDChanged()
    End Sub
    Partial Private Sub OnREGISTRATION_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnREGISTRATION_NAMEChanged()
    End Sub
    Partial Private Sub OnMOBILE_NOChanging(value As String)
    End Sub
    Partial Private Sub OnMOBILE_NOChanged()
    End Sub
    Partial Private Sub OnEMAIL_IDChanging(value As String)
    End Sub
    Partial Private Sub OnEMAIL_IDChanged()
    End Sub
    Partial Private Sub OnPASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnPASSWORDChanged()
    End Sub
    Partial Private Sub OnGENDERChanging(value As String)
    End Sub
    Partial Private Sub OnGENDERChanged()
    End Sub
    Partial Private Sub OnADDRESSChanging(value As String)
    End Sub
    Partial Private Sub OnADDRESSChanged()
    End Sub
    Partial Private Sub OnADM_ATH_IDChanging(value As String)
    End Sub
    Partial Private Sub OnADM_ATH_IDChanged()
    End Sub
    Partial Private Sub OnADM_CITY_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADM_CITY_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ADM_AGENCY_REGISTRATIONs = New EntitySet(Of ADM_AGENCY_REGISTRATION)(AddressOf Me.attach_ADM_AGENCY_REGISTRATIONs, AddressOf Me.detach_ADM_AGENCY_REGISTRATIONs)
		Me._ADM_AGENCY_TYPEs = New EntitySet(Of ADM_AGENCY_TYPE)(AddressOf Me.attach_ADM_AGENCY_TYPEs, AddressOf Me.detach_ADM_AGENCY_TYPEs)
		Me._ADM_CITies = New EntitySet(Of ADM_CITY)(AddressOf Me.attach_ADM_CITies, AddressOf Me.detach_ADM_CITies)
		Me._ADM_CONTACT_US = New EntitySet(Of ADM_CONTACT_US)(AddressOf Me.attach_ADM_CONTACT_US, AddressOf Me.detach_ADM_CONTACT_US)
		Me._ADM_CUSTOMER_REGISTRATIONs = New EntitySet(Of ADM_CUSTOMER_REGISTRATION)(AddressOf Me.attach_ADM_CUSTOMER_REGISTRATIONs, AddressOf Me.detach_ADM_CUSTOMER_REGISTRATIONs)
		Me._ADM_CUSTOMIZE_PACKAGEs = New EntitySet(Of ADM_CUSTOMIZE_PACKAGE)(AddressOf Me.attach_ADM_CUSTOMIZE_PACKAGEs, AddressOf Me.detach_ADM_CUSTOMIZE_PACKAGEs)
		Me._ADM_EMPLOYEEs = New EntitySet(Of ADM_EMPLOYEE)(AddressOf Me.attach_ADM_EMPLOYEEs, AddressOf Me.detach_ADM_EMPLOYEEs)
		Me._ADM_EMPLOYEE_TYPEs = New EntitySet(Of ADM_EMPLOYEE_TYPE)(AddressOf Me.attach_ADM_EMPLOYEE_TYPEs, AddressOf Me.detach_ADM_EMPLOYEE_TYPEs)
		Me._ADM_INQUIRies = New EntitySet(Of ADM_INQUIRY)(AddressOf Me.attach_ADM_INQUIRies, AddressOf Me.detach_ADM_INQUIRies)
		Me._ADM_PACKAGE_TYPEs = New EntitySet(Of ADM_PACKAGE_TYPE)(AddressOf Me.attach_ADM_PACKAGE_TYPEs, AddressOf Me.detach_ADM_PACKAGE_TYPEs)
		Me._ADM_CITY = CType(Nothing, EntityRef(Of ADM_CITY))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_REGISTRATION_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ADM_REGISTRATION_ID() As Integer
		Get
			Return Me._ADM_REGISTRATION_ID
		End Get
		Set
			If ((Me._ADM_REGISTRATION_ID = value)  _
						= false) Then
				Me.OnADM_REGISTRATION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_REGISTRATION_ID = value
				Me.SendPropertyChanged("ADM_REGISTRATION_ID")
				Me.OnADM_REGISTRATION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REGISTRATION_NAME", DbType:="VarChar(250)")>  _
	Public Property REGISTRATION_NAME() As String
		Get
			Return Me._REGISTRATION_NAME
		End Get
		Set
			If (String.Equals(Me._REGISTRATION_NAME, value) = false) Then
				Me.OnREGISTRATION_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._REGISTRATION_NAME = value
				Me.SendPropertyChanged("REGISTRATION_NAME")
				Me.OnREGISTRATION_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOBILE_NO", DbType:="VarChar(15)")>  _
	Public Property MOBILE_NO() As String
		Get
			Return Me._MOBILE_NO
		End Get
		Set
			If (String.Equals(Me._MOBILE_NO, value) = false) Then
				Me.OnMOBILE_NOChanging(value)
				Me.SendPropertyChanging
				Me._MOBILE_NO = value
				Me.SendPropertyChanged("MOBILE_NO")
				Me.OnMOBILE_NOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL_ID", DbType:="VarChar(50)")>  _
	Public Property EMAIL_ID() As String
		Get
			Return Me._EMAIL_ID
		End Get
		Set
			If (String.Equals(Me._EMAIL_ID, value) = false) Then
				Me.OnEMAIL_IDChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL_ID = value
				Me.SendPropertyChanged("EMAIL_ID")
				Me.OnEMAIL_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PASSWORD", DbType:="VarChar(50)")>  _
	Public Property PASSWORD() As String
		Get
			Return Me._PASSWORD
		End Get
		Set
			If (String.Equals(Me._PASSWORD, value) = false) Then
				Me.OnPASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._PASSWORD = value
				Me.SendPropertyChanged("PASSWORD")
				Me.OnPASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GENDER", DbType:="VarChar(15)")>  _
	Public Property GENDER() As String
		Get
			Return Me._GENDER
		End Get
		Set
			If (String.Equals(Me._GENDER, value) = false) Then
				Me.OnGENDERChanging(value)
				Me.SendPropertyChanging
				Me._GENDER = value
				Me.SendPropertyChanged("GENDER")
				Me.OnGENDERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADDRESS", DbType:="VarChar(250)")>  _
	Public Property ADDRESS() As String
		Get
			Return Me._ADDRESS
		End Get
		Set
			If (String.Equals(Me._ADDRESS, value) = false) Then
				Me.OnADDRESSChanging(value)
				Me.SendPropertyChanging
				Me._ADDRESS = value
				Me.SendPropertyChanged("ADDRESS")
				Me.OnADDRESSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_ATH_ID", DbType:="VarChar(50)")>  _
	Public Property ADM_ATH_ID() As String
		Get
			Return Me._ADM_ATH_ID
		End Get
		Set
			If (String.Equals(Me._ADM_ATH_ID, value) = false) Then
				Me.OnADM_ATH_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_ATH_ID = value
				Me.SendPropertyChanged("ADM_ATH_ID")
				Me.OnADM_ATH_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADM_CITY_ID", DbType:="Int")>  _
	Public Property ADM_CITY_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ADM_CITY_ID
		End Get
		Set
			If (Me._ADM_CITY_ID.Equals(value) = false) Then
				If Me._ADM_CITY.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnADM_CITY_IDChanging(value)
				Me.SendPropertyChanging
				Me._ADM_CITY_ID = value
				Me.SendPropertyChanged("ADM_CITY_ID")
				Me.OnADM_CITY_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_AGENCY_REGISTRATION", Storage:="_ADM_AGENCY_REGISTRATIONs", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID")>  _
	Public Property ADM_AGENCY_REGISTRATIONs() As EntitySet(Of ADM_AGENCY_REGISTRATION)
		Get
			Return Me._ADM_AGENCY_REGISTRATIONs
		End Get
		Set
			Me._ADM_AGENCY_REGISTRATIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_AGENCY_TYPE", Storage:="_ADM_AGENCY_TYPEs", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID")>  _
	Public Property ADM_AGENCY_TYPEs() As EntitySet(Of ADM_AGENCY_TYPE)
		Get
			Return Me._ADM_AGENCY_TYPEs
		End Get
		Set
			Me._ADM_AGENCY_TYPEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_CITY", Storage:="_ADM_CITies", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID")>  _
	Public Property ADM_CITies() As EntitySet(Of ADM_CITY)
		Get
			Return Me._ADM_CITies
		End Get
		Set
			Me._ADM_CITies.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_CONTACT_US", Storage:="_ADM_CONTACT_US", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID")>  _
	Public Property ADM_CONTACT_US() As EntitySet(Of ADM_CONTACT_US)
		Get
			Return Me._ADM_CONTACT_US
		End Get
		Set
			Me._ADM_CONTACT_US.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_CUSTOMER_REGISTRATION", Storage:="_ADM_CUSTOMER_REGISTRATIONs", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID")>  _
	Public Property ADM_CUSTOMER_REGISTRATIONs() As EntitySet(Of ADM_CUSTOMER_REGISTRATION)
		Get
			Return Me._ADM_CUSTOMER_REGISTRATIONs
		End Get
		Set
			Me._ADM_CUSTOMER_REGISTRATIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_CUSTOMIZE_PACKAGE", Storage:="_ADM_CUSTOMIZE_PACKAGEs", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID")>  _
	Public Property ADM_CUSTOMIZE_PACKAGEs() As EntitySet(Of ADM_CUSTOMIZE_PACKAGE)
		Get
			Return Me._ADM_CUSTOMIZE_PACKAGEs
		End Get
		Set
			Me._ADM_CUSTOMIZE_PACKAGEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_EMPLOYEE", Storage:="_ADM_EMPLOYEEs", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID")>  _
	Public Property ADM_EMPLOYEEs() As EntitySet(Of ADM_EMPLOYEE)
		Get
			Return Me._ADM_EMPLOYEEs
		End Get
		Set
			Me._ADM_EMPLOYEEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_EMPLOYEE_TYPE", Storage:="_ADM_EMPLOYEE_TYPEs", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID")>  _
	Public Property ADM_EMPLOYEE_TYPEs() As EntitySet(Of ADM_EMPLOYEE_TYPE)
		Get
			Return Me._ADM_EMPLOYEE_TYPEs
		End Get
		Set
			Me._ADM_EMPLOYEE_TYPEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_INQUIRY", Storage:="_ADM_INQUIRies", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID")>  _
	Public Property ADM_INQUIRies() As EntitySet(Of ADM_INQUIRY)
		Get
			Return Me._ADM_INQUIRies
		End Get
		Set
			Me._ADM_INQUIRies.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_REGISTRATION_ADM_PACKAGE_TYPE", Storage:="_ADM_PACKAGE_TYPEs", ThisKey:="ADM_REGISTRATION_ID", OtherKey:="ADM_REGISTRATION_ID")>  _
	Public Property ADM_PACKAGE_TYPEs() As EntitySet(Of ADM_PACKAGE_TYPE)
		Get
			Return Me._ADM_PACKAGE_TYPEs
		End Get
		Set
			Me._ADM_PACKAGE_TYPEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ADM_CITY_ADM_REGISTRATION", Storage:="_ADM_CITY", ThisKey:="ADM_CITY_ID", OtherKey:="ADM_CITY_ID", IsForeignKey:=true)>  _
	Public Property ADM_CITY() As ADM_CITY
		Get
			Return Me._ADM_CITY.Entity
		End Get
		Set
			Dim previousValue As ADM_CITY = Me._ADM_CITY.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ADM_CITY.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ADM_CITY.Entity = Nothing
					previousValue.ADM_REGISTRATIONs.Remove(Me)
				End If
				Me._ADM_CITY.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ADM_REGISTRATIONs.Add(Me)
					Me._ADM_CITY_ID = value.ADM_CITY_ID
				Else
					Me._ADM_CITY_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ADM_CITY")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ADM_AGENCY_REGISTRATIONs(ByVal entity As ADM_AGENCY_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Me
	End Sub
	
	Private Sub detach_ADM_AGENCY_REGISTRATIONs(ByVal entity As ADM_AGENCY_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Nothing
	End Sub
	
	Private Sub attach_ADM_AGENCY_TYPEs(ByVal entity As ADM_AGENCY_TYPE)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Me
	End Sub
	
	Private Sub detach_ADM_AGENCY_TYPEs(ByVal entity As ADM_AGENCY_TYPE)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Nothing
	End Sub
	
	Private Sub attach_ADM_CITies(ByVal entity As ADM_CITY)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Me
	End Sub
	
	Private Sub detach_ADM_CITies(ByVal entity As ADM_CITY)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Nothing
	End Sub
	
	Private Sub attach_ADM_CONTACT_US(ByVal entity As ADM_CONTACT_US)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Me
	End Sub
	
	Private Sub detach_ADM_CONTACT_US(ByVal entity As ADM_CONTACT_US)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Nothing
	End Sub
	
	Private Sub attach_ADM_CUSTOMER_REGISTRATIONs(ByVal entity As ADM_CUSTOMER_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Me
	End Sub
	
	Private Sub detach_ADM_CUSTOMER_REGISTRATIONs(ByVal entity As ADM_CUSTOMER_REGISTRATION)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Nothing
	End Sub
	
	Private Sub attach_ADM_CUSTOMIZE_PACKAGEs(ByVal entity As ADM_CUSTOMIZE_PACKAGE)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Me
	End Sub
	
	Private Sub detach_ADM_CUSTOMIZE_PACKAGEs(ByVal entity As ADM_CUSTOMIZE_PACKAGE)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Nothing
	End Sub
	
	Private Sub attach_ADM_EMPLOYEEs(ByVal entity As ADM_EMPLOYEE)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Me
	End Sub
	
	Private Sub detach_ADM_EMPLOYEEs(ByVal entity As ADM_EMPLOYEE)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Nothing
	End Sub
	
	Private Sub attach_ADM_EMPLOYEE_TYPEs(ByVal entity As ADM_EMPLOYEE_TYPE)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Me
	End Sub
	
	Private Sub detach_ADM_EMPLOYEE_TYPEs(ByVal entity As ADM_EMPLOYEE_TYPE)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Nothing
	End Sub
	
	Private Sub attach_ADM_INQUIRies(ByVal entity As ADM_INQUIRY)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Me
	End Sub
	
	Private Sub detach_ADM_INQUIRies(ByVal entity As ADM_INQUIRY)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Nothing
	End Sub
	
	Private Sub attach_ADM_PACKAGE_TYPEs(ByVal entity As ADM_PACKAGE_TYPE)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Me
	End Sub
	
	Private Sub detach_ADM_PACKAGE_TYPEs(ByVal entity As ADM_PACKAGE_TYPE)
		Me.SendPropertyChanging
		entity.ADM_REGISTRATION = Nothing
	End Sub
End Class
